#!/bin/bash
# startpyproject: Generate the boilerplate for a new Python project.
#
# startpyproject can do the following:
#   - Initialize a git repo with a .gitignore that's tailored for Python.
#   - Set up a pre-commit hook for git that runs black and flake8.
#   - Create a flake8 configuration file.
#   - Create a virtual environment.
#   - Create directories for a main package and a test package.
#   - Create a new Django project.
#
# Example uses:
#
#     # Create a project in a new directory.
#     $ startpyproject myproject
#
#     # Initialize a project in the current directory.
#     $ startpyproject
#
#     # Create a Django project.
#     $ startpyproject --django mysite
#
#     # Get help.
#     $ startpyproject --help
#
# The startpyproject script is self-contained. Simply drop it anywhere on
# your PATH.
#
# Author:  Ian Fisher (iafisher@protonmail.com)
# Version: November 2019
# Online:  https://github.com/iafisher/startpyproject


set -e


usage() {
  echo "Usage: $0 [options] directory"
  echo
  echo "Options:"
  echo "  -p, --package [name]    Create a package with the given name."
  echo "  --django [name]         Create a Django project with the given name."
  echo "  --no-git                Do not initialize a Git repository."
  echo "  --no-venv               Do not create a virtual environment."
  echo "  --help                  Display a help message."
  echo
  echo "If the directory argument is not provided it defaults to (a) the name"
  echo "of the Django project if --django is used, or (b) the current working"
  echo "directory otherwise."
  echo
  echo "By default, startpyproject will do the following:"
  echo "   - Initialize a git repo with a .gitignore that's tailored for Python."
  echo "   - Create a virtual environment."
  echo "   - Create a flake8 configuration file."
  echo "   - Set up a pre-commit hook for git that runs black and flake8."
}


error() {
  echo "Error: $1"
  echo
  echo "Run $0 --help for assistance."
  exit 1
}


status() {
  echo
  echo "[startpyproject] $1"
}


confirm() {
  echo -n "$1"
  read yesno
  case "$yesno" in
    y|yes) ;;
    *) exit ;;
  esac
}


# `require_arg "$1" "$2"` is the normal usage. Enforces that "$2" is non-empty.
require_arg() {
  if [[ -z "$2" ]]; then
    error "$1 flag without argument."
  fi
}


# Parse command-line options.
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -p|--package)
      require_arg "$1" "$2"
      shift
      OPT_PACKAGE=$1
      ;;

    --django)
      require_arg "$1" "$2"
      shift
      OPT_DJANGO=$1
      ;;

    --no-git)
      OPT_NO_GIT=yes
      ;;

    --no-venv)
      OPT_NO_VENV=yes
      ;;

    -h|--help)
      OPT_HELP=yes
      ;;

    -*)
      error "unknown option $1."
      ;;

    *)
      if [[ -z "$OPT_DIR" ]]; then
        OPT_DIR=$1
      else
        error "extra argument $1."
      fi
      ;;
  esac

  shift
done

if [[ -z "$OPT_DIR" ]]; then
  # Default to name of Django project if provided, current directory otherwise.
  if [[ -z "$OPT_DJANGO" ]]; then
    OPT_DIR=.
  else
    OPT_DIR=$OPT_DJANGO
  fi
fi

if [[ -n "$OPT_HELP" ]]; then
  usage
  exit
fi

if [[ -n "$OPT_PACKAGE" ]] && [[ -n "$OPT_DJANGO" ]]; then
  error "--package and --django are incompatible."
fi

if [[ -z "$OPT_NO_GIT" ]] && ! which git &> /dev/null; then
  echo "Error: git is not installed."
  exit 2
fi

if [[ -z "$OPT_NO_VENV" ]] && ! which virtualenv &> /dev/null; then
  echo "Error: virtualenv is not installed."
  exit 2
fi

if [[ -n "$OPT_NO_VENV" ]] && ! which pip3 &> /dev/null; then
  echo "Error: pip3 is not installed."
  exit 2
fi

if [[ ! -e "$OPT_DIR" ]]; then
  mkdir -p "$OPT_DIR"
fi

if [[ ! -z "$(ls -A "$OPT_DIR")" ]]; then
  confirm "The directory is not empty. Do you wish to continue? "
fi

if [[ -n "$OPT_NO_VENV" ]] && [[ -n "$OPT_DJANGO" ]]; then
  confirm "Are you sure you want to install Django without a virtual environment? "
fi

cd "$OPT_DIR"

if [[ -z "$OPT_NO_GIT" ]]; then
  status "Creating git repository"
  git init

  status "Creating .gitignore"
  cat << EOF > .gitignore
__pycache__
*.pyc
*.pyo
.mypy_cache
.pytest_cache
.venv
*.egg-info
/build
/dist
.coverage

*.swp
*~
.DS_Store
EOF
fi


status "Creating .flake8"
cat << EOF > .flake8
[flake8]
max-line-length = 88
exclude = .git, __pycache__, __init__py
# Ignore errors that black handles or creates (e.g., E203).
ignore =
    # E203 whitespace before ':'
    E203,
    # W503 line break before binary operator
    W503,
    # W293 blank line contains whitespace (sometimes we need it in string
    # literals, and black will catch it anyway)
    W293,
    # E501 line too long
    E501,
EOF


if [[ -z "$OPT_NO_GIT" ]]; then
  status "Creating .git/hooks/pre-commit"
  cat << EOF > .git/hooks/pre-commit
#!/bin/sh

set -e

# Find all Python files, ignoring the virtual environment, and run black and
# flake8 on them.
PY=\$(find . -path ./.venv -prune -o -name "*.py" -print)
black --check \$PY
flake8 \$PY
EOF
  chmod +x .git/hooks/pre-commit
fi


if [[ -n "$OPT_PACKAGE" ]]; then
  status "Creating package directory"
  mkdir "$OPT_PACKAGE"
  touch "$OPT_PACKAGE/__init__.py"


  status "Creating test directory"
  mkdir test
  touch test/__init__.py
fi


if [[ -z "$OPT_NO_VENV" ]]; then
  status "Creating virtual environment"
  virtualenv .venv --python=python3
fi


if [[ -n "$OPT_DJANGO" ]]; then
  if [[ -z "$OPT_NO_VENV" ]]; then
    mypip=.venv/bin/pip3
    mydjango=.venv/bin/django-admin
  else
    mypip=pip3
    mydjango=django-admin
  fi

  status "Installing Django"
  $mypip install Django

  status "Initializing Django project"
  $mydjango startproject "$OPT_DJANGO" .
  # Since some of Django's starter files do not conform to black style, run
  # black on them after creation (but only if black is installed).
  if which black &> /dev/null; then
    black "$OPT_DJANGO" manage.py
  fi

  status "Generating requirements.txt"
  $mypip freeze > requirements.txt
fi


status "All done!"
