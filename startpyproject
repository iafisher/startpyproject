#!/bin/bash
# startpyproject: Generate the boilerplate for a new Python project.
# 
# startpyproject does the following:
#   - Initializes a git repo with a .gitignore that's tailored for Python.
#   - Sets up a pre-commit hook for git that runs black and flake8.
#   - Creates a flake8 configuration file.
#   - Creates a virtual environment.
#   - (Optional) Creates directories for a main package and a test package.
#   - (Optional) Creates a new Django project.
# 
# Make sure to run the script in the already-created project directory.
# Typical usage is
# 
#     $ mkdir myproject
#     $ cd myproject
#     $ startpyproject -p mypackage
# 
# The startpyproject script is self-contained. Simply drop it anywhere on
# your PATH. Run
#
#     $ startpyproject --help
#
# for documentation of command-line options.
#
# Author:  Ian Fisher (iafisher@protonmail.com)
# Version: May 2019
# Online:  https://github.com/iafisher/startpyproject


set -e


usage() {
  echo "Usage: $0 [options] package"
  echo
  echo "Options:"
  echo "  -p, --package name    Create a package with the given name."
  echo "  --django name         Create a Django project with the given name."
  echo "  --no-venv             Do not create a virtual environment."
  echo "  --help                Display a help message."
}


error() {
  echo "Error: $1"
  echo
  usage
  exit 1
}


status() {
  echo
  echo "[startpyproject] $1"
}


# require_arg "$1" "$2" is the normal usage. Enforces that "$2" is non-empty.
require_arg() {
  if [[ -z "$2" ]]; then
    error "$1 flag without argument."
  fi
}


# Parse command-line options.
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -p|--package)
      require_arg "$1" "$2"
      shift
      OPT_PACKAGE=$1
      ;;

    --django)
      require_arg "$1" "$2"
      shift
      OPT_DJANGO=$1
      ;;

    --no-venv)
      OPT_NO_VENV=yes
      ;;

    -h|--help)
      OPT_HELP=yes
      ;;

    *)
      error "unknown option $1."
      ;;
  esac

  shift
done


if [[ -n "$OPT_PACKAGE" ]] && [[ -n "$OPT_DJANGO" ]]; then
  error "--package and --django are incompatible."
fi

if [[ -n "$OPT_NO_VENV" ]] && [[ -n "$OPT_DJANGO" ]]; then
  echo -n "Are you sure you want to install Django without a virtual environment? "
  read yesno
  case "$yesno" in
    y|yes) ;;
    *) exit ;;
  esac
fi


if [[ -n "$OPT_HELP" ]]; then
  usage
  exit
fi


status "Creating git repository"
git init


status "Creating .gitignore"
cat << EOF > .gitignore
__pycache__
*.pyc
*.pyo
.mypy_cache
.pytest_cache
.venv
*.egg-info
/build
/dist
.coverage

*.swp
*~
.DS_Store
EOF


status "Creating .flake8"
cat << EOF > .flake8
[flake8]
max-line-length = 88
exclude = .git, __pycache__, __init__py
# Ignore errors that black handles or creates (e.g., E203).
ignore =
    # E203 whitespace before ':'
    E203,
    # W503 line break before binary operator
    W503,
    # W293 blank line contains whitespace (sometimes we need it in string
    # literals, and black will catch it anyway)
    W293,
    # E501 line too long
    E501,
EOF


status "Creating .git/hooks/pre-commit"
cat << EOF > .git/hooks/pre-commit
#!/bin/sh

set -e

# Find all Python files, ignoring the virtual environment, and run black and
# flake8 on them.
PY=$(find . -path ./.venv -prune -o -name "*.py" -print)
black --check $PY
flake8 $PY
EOF
chmod +x .git/hooks/pre-commit


if [[ -n "$OPT_PACKAGE" ]]; then
  status "Creating package directory"
  mkdir "$OPT_PACKAGE"
  touch "$OPT_PACKAGE/__init__.py"


  status "Creating test directory"
  mkdir test
  touch test/__init__.py
fi


if [[ -z "$OPT_NO_VENV" ]]; then
  status "Creating virtual environment"
  virtualenv .venv --python=python3
fi


if [[ -n "$OPT_DJANGO" ]]; then
  if [[ -z "$OPT_NO_VENV" ]]; then
    mypip=.venv/bin/pip3
    mydjango=.venv/bin/django-admin
  else
    mypip=pip3
    mydjango=django-admin
  fi

  status "Installing Django"
  $mypip install Django

  status "Initializing Django project"
  $mydjango startproject "$OPT_DJANGO" .
  black "$OPT_DJANGO" manage.py

  status "Generating requirements.txt"
  $mypip freeze > requirements.txt
fi


status "All done!"
